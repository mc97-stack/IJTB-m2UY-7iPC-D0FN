//
//  02g1LamVelPro.h
//  Process Model (Cross-Platform)
//
//  Created by Matthew Cheung on 21/09/2020.
//  Copyright Â© 2020 Matthew Cheung. All rights reserved.
//

//  Global variables
/*  
 profile = array of double variables used to store the data generated by the function
 d = Pipe diameter (m)
 r = Pipe radius (m)
 L = Pipe length under observation (m)
 dP = Fluid pressure loss over the observed length (Pa)
 mu = Fluid viscosity (Pa.s)
 
 */

#ifndef LamVelProVar_h
#define LamVelProVar_h

void LamVelProVar(double *dP, double *L, double *d, double *mu);
/*  This subroutine used to collect the data required for calculating the velocity profile of a fluid flowing with laminar flow characteristics. A description of the variables used in this subroutine are:
 - input = a character input variable used to hold keyboard input
 - d = Pipe diameter (mm)
    -> This value is converted to metres after data is inputted
 - L = Pipe length (m)
 - dP = Fluid pressure loss
 - mu = Fluid viscosity (cP)
    -> This value is converted to Pa.s after data is inputted.
 This subroutine returns the value of the 4 listed variables in the subroutine declaration.
 */

#endif /* LamVelProVar_h */

#ifndef LamVelCalc_h
#define LamVelCalc_h

double LamVelCalc(double dP, double L, double d, double mu, double r);
/*  This subroubtine is used to run a calculation for the point velocity at some radius in a cylindrical pipe segment from theory. This subroutine utilises an additional three variables to hold values between calculations. After calculation, this subroutine returns the value of v_x to the calling function. This function is called from "LamVelProfCalc(...)".
 */

#endif /* LamVelCalc_h */

#ifndef LamGenCalc_h
#define LamGenCalc_h

double LamGenCalc(double r, double d);
/*  This subroutine is used to predict the velocity distribution in reference to the maximum velocity at the centreline. This subroutine utilises the variable "func" to return the value of v/v_{max}. This subroutine returns the ratio to the function "LamVelProfCalc(...)".
 */

#endif /* LamGenCalc_h */

#ifndef LamVelProfCalc_h
#define LamVelProfCalc_h

void LamVelProfCalc(double dP, double L, double d, double mu);
/*  This subroutine is used to calculate and display the velocity profile. This function uses the following additional variables:
 display = Character variable used to control whether the generated dataset should be displayed on the console.
 interval = interval between radius data entries used to calculate the point velocities.
 prad = Absolute pipe radius. 
    N.B. This is different to the variable 'r'.
 rows = integer value used to determine the size of the array prior to being declared.
 whildisp = integer value used to control the while loop for displaying data within the console.
 profile = A double array with 'rows' rows and 3 columns. 
 i = integer value to determine the number of rows successfully generated by the for loop within this subroutine
 r = point radius.
 
 This function does not return the generated array back outside the function. This is possible but the there would be limited to a set size since variables are not dynamic within C. This subroutine has no external dependency in the file "02hHagPois.c" to determine the velocity profile after the frictional pressure loss of a fluid has been calculated.
 */

#endif /* LamVelProfCalc_h */

#ifndef LamVelPro_h
#define LamVelPro_h

void LamVelPro(void);
/*  This is the main subroutine controlling the behaviour of the subroutines listed in the file. It uses the following variables:
 ContCond = A character variable used to determine if the user wants to run more of the same calculation again.
 whilmain = An integer variable used to control the main while loop controlling the behaviour of the subroutines in this file.
 whilcont = An integer variable used to control input of the continue condition determine by the user input into the variable "ContCond".
 This subroutine does not return any values to another function. This subroutine is also not called outside of this file.
 */

#endif /* LamVelPro_h */
